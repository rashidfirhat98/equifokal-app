// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  profilePic    String?
  bio           String?
  images        Image[]
  galleries     Gallery[]
  articles      Article[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  type              String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Image {
  id          Int            @id @default(autoincrement())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  url         String
  fileName    String
  createdAt   DateTime       @default(now())
  portfolio   Boolean        @default(false)
  profilePic  Boolean        @default(false)
  blurDataUrl String?
  height      Int?
  width       Int?
  metadata    Metadata?      @relation("ImageMetadata")
  galleries   GalleryImage[]
  Article     Article[]      @relation("ImageCover")

  @@index([userId, portfolio])
  @@index([userId])
}

model Metadata {
  id           Int     @id @default(autoincrement())
  imageId      Int     @unique
  image        Image   @relation("ImageMetadata", fields: [imageId], references: [id], onDelete: Cascade)
  model        String?
  aperture     Float?
  focalLength  Float?
  exposureTime Float?
  iso          Int?
  flash        String?
  height       Int?
  width        Int?
}

model Gallery {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  images      GalleryImage[]
  articles    ArticleGallery[]
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

   @@index([userId])
}

model GalleryImage {
  galleryId Int
  imageId   Int
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  image     Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([galleryId, imageId])
  @@index([galleryId])
  @@index([imageId])
}

model Article {
  id           Int              @id @default(autoincrement())
  title        String
  description  String           
  content      String
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  galleries    ArticleGallery[]
  coverImageId Int?
  coverImage   Image?           @relation("ImageCover", fields: [coverImageId], references: [id], onDelete: SetNull)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([userId])
}

model ArticleGallery {
  id        Int     @id @default(autoincrement())
  articleId Int
  galleryId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@unique([articleId, galleryId])
  @@index([articleId])
  @@index([galleryId])
}

model Follow {
  id           String   @id @default(uuid())
  followerId   String
  followingId  String
  follower     User     @relation("UserFollowing", fields: [followerId], references: [id])
  following    User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}