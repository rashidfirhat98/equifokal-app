// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  profilePic    String?  
  bio           String?  
  images        Image[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  type              String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Image {
  id          Int           @id @default(autoincrement())
  userId      String        
  user        User          @relation(fields: [userId], references: [id])
  url         String
  fileName    String
  createdAt   DateTime      @default(now())     
  metadata    Metadata?     @relation("ImageMetadata")
  galleries   GalleryImage[]
}

model Metadata {
  id            Int     @id @default(autoincrement())
  imageId       Int     @unique
  image         Image   @relation("ImageMetadata", fields: [imageId], references: [id], onDelete: Cascade) 
  model         String?
  aperture      Float?
  focalLength   Float?
  exposureTime  Float?
  iso           Int?
  flash         String?
  height        Int?
  width         Int?
}

model Gallery {
  id          Int           @id @default(autoincrement()) 
  title       String       
  description String?       // Optional description
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  images      GalleryImage[]
}

model GalleryImage {
  galleryId Int
  imageId   Int
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  image     Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([galleryId, imageId]) // Composite primary key
}